# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  deploy:
    docker:
      - image: circleci/php:7.1-node-browsers

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ./
      - run: ls ./public/js
      - run: echo 'Deployment to follow'

  build_frontend:
    docker:
      - image: circleci/node:9.5

    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-dependencies-{{ checksum "yarn.lock" }}

      - run: yarn install

      - save_cache:
          paths:
          - ./node_modules
          key: frontend-dependencies-{{ checksum "yarn.lock" }}

      - run: yarn test
      - run: yarn production
      - persist_to_workspace:
          root: ./
          paths:
            - public/*

  build_server:
    docker:
      # specify the version you desire here
      - image: circleci/php:7.1-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mysql:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - run: sudo apt install -y libsqlite3-dev zlib1g-dev libpng-dev
      - run: sudo docker-php-ext-install zip pcntl gd exif
      - run: sudo composer self-update

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # run tests!
      - run: ./vendor/bin/phpunit -d memory_limit=2048M
      - persist_to_workspace:
          root: ./
          paths:
            - vendor/*

workflows:
  version: 2
  samarkand_workflow:
    jobs:
      - build_frontend
      - build_server
      - deploy:
          requires:
              - build_frontend
              - build_server
          filters:
            branches:
              only:
                - feature/eb
                - /hotfix\/.*/

